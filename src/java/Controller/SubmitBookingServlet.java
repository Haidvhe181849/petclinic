package Controller;

import DAO.BookingDAO;
import Entity.Booking;
import Entity.UserAccount;
import Utility.DBContext;
import java.io.IOException;
import java.sql.Connection;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/SubmitBooking")
public class SubmitBookingServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        System.out.println("üî• [DEBUG] ƒê√£ v√†o SubmitBookingServlet");

        request.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession();
        UserAccount user = (UserAccount) session.getAttribute("user");

        if (user == null) {
            System.out.println("üî¥ Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p");
            response.sendRedirect("Presentation/Login.jsp");
            return;
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ form
        String doctorIdRaw = request.getParameter("doctorId");
        String doctorId = (doctorIdRaw == null || doctorIdRaw.trim().isEmpty()) ? null : doctorIdRaw;

        String petId = request.getParameter("petId");
        String serviceId = request.getParameter("serviceId");
        String date = request.getParameter("date");
        String time = request.getParameter("time");
        String note = request.getParameter("note");

        System.out.println("üì• doctorId raw = '" + doctorIdRaw + "' ‚Üí x·ª≠ l√Ω th√†nh: " + doctorId);
        System.out.println("üîé Input: doctor=" + doctorId + ", pet=" + petId + ", date=" + date + ", time=" + time);

        try (Connection conn = new DBContext().connection) {
            BookingDAO dao = new BookingDAO(conn);

            // Ki·ªÉm tra tr√πng gi·ªù n·∫øu c√≥ ch·ªçn b√°c sƒ©
            if (doctorId != null) {
                List<String> bookedTimes = dao.getBookedTimesForDateAndDoctor(date, doctorId);
                if (bookedTimes.contains(time)) {
                    System.out.println("‚ö†Ô∏è Gi·ªù ƒë√£ b·ªã ƒë·∫∑t");
                    response.sendRedirect("BookingForm?error=Gi·ªù ƒë√£ b·ªã ƒë·∫∑t");
                    return;
                }
            }

            String bookingId = dao.generateNewBookingId();

            // Parse th·ªùi gian
            LocalDateTime bookingTime;
            try {
                bookingTime = LocalDateTime.parse(date + " " + time,
                        DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
            } catch (Exception ex) {
                System.out.println("‚ùå L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian: " + ex.getMessage());
                response.sendRedirect("BookingForm?error=ƒê·ªãnh d·∫°ng ng√†y gi·ªù kh√¥ng h·ª£p l·ªá");
                return;
            }

            // T·∫°o booking ph√π h·ª£p v·ªõi t√¨nh hu·ªëng
            Booking booking;
            if (doctorId != null) {
                booking = new Booking(bookingId, user.getUserId(), doctorId,
                        serviceId, petId, note, bookingTime, "Pending");
            } else {
                booking = new Booking(bookingId, user.getUserId(),
                        serviceId, petId, note, bookingTime, "Pending");
            }

            boolean success = dao.insertBooking(booking);
            System.out.println("‚úÖ K·∫øt qu·∫£ insert: " + success);

//            if (success) {
//                // TH√äM D√íNG N√ÄY:
//                boolean detailInserted = dao.insertBookingDetail(bookingId, user);
//                System.out.println("üì• Detail inserted: " + detailInserted);
//
//                response.sendRedirect("BookingForm?success=true");
//            } else {
//                System.out.println("‚ùå insertBooking tr·∫£ v·ªÅ false");
//                response.sendRedirect("BookingForm?error=ƒê·∫∑t l·ªãch th·∫•t b·∫°i.");
//            }
            if (success) {
                // L∆∞u bookingId v√†o session ƒë·ªÉ s·ª≠ d·ª•ng trong qu√° tr√¨nh thanh to√°n
                session.setAttribute("pendingBookingId", bookingId);

                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n
                response.sendRedirect("payment");
            } else {
                System.out.println("‚ùå insertBooking tr·∫£ v·ªÅ false");
                response.sendRedirect("BookingForm?error=ƒê·∫∑t l·ªãch th·∫•t b·∫°i.");
            }

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói trong SubmitBookingServlet:");
            e.printStackTrace();

            // Redirect l·ªói thay v√¨ in ra text th√¥
            response.sendRedirect("BookingForm?error=L·ªói h·ªá th·ªëng khi ƒë·∫∑t l·ªãch");
        }
    }
}
